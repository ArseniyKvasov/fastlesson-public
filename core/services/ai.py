import json
import logging
import random
from typing import Any, Dict, Optional
from groq import Groq
from google import genai
from google.genai import types
from fastlesson_bot.config import GROQ_API_KEY, GENAI_API_KEY

logger = logging.getLogger(__name__)

AI_MODELS = [
    {
        "name": "gemma-3-27b-it",
        "day_limit_requests": 14400,
        "is_visual": True,
        "provider": "Google",
        "type": "premium"
    },
    {
        "name": "gemma-3-12b-it",
        "day_limit_requests": 14400,
        "is_visual": False,
        "provider": "Google",
        "type": "basic"
    },
    {
        "name": "gemini-2.0-flash-lite",
        "day_limit_requests": 1500,
        "is_visual": False,
        "provider": "Google",
        "type": "premium"
    },
    {
        "name": "gemini-2.0-flash",
        "day_limit_requests": 1500,
        "is_visual": False,
        "provider": "Google",
        "type": "premium"
    },
    {
        "name": "llama-3.3-70b-versatile",
        "day_limit_requests": 1000,
        "is_visual": False,
        "provider": "Groq",
        "type": "premium"
    },
    {
        "name": "qwen/qwen3-32b",
        "day_limit_requests": 1000,
        "is_visual": False,
        "provider": "Groq",
        "type": "premium"
    },
]

genai_client = genai.Client(api_key=GENAI_API_KEY)
client = Groq(api_key=GROQ_API_KEY)

def extract_json(text: str) -> Optional[Dict[str, Any]]:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –≤—ã—Ç–∞—â–∏—Ç—å JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—É—é { –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é }).
    """
    try:
        start = text.find("{")
        end = text.rfind("}") + 1
        if start == -1 or end == -1:
            return None
        return json.loads(text[start:end])
    except Exception as e:
        logger.warning(f"JSON parse error: {e}")
        return None


def generate_text(query: str, max_tokens: int = 2500, temperature: float = 0.7, top_p: float = 0.9) -> Dict[str, Any]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä JSON-–æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Google –∏–ª–∏ Groq.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å (dict), –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.
    –ß–µ—Ä–µ–¥—É–µ—Ç –º–æ–¥–µ–ª–∏ –∏–∑ AI_MODELS, –ø—ã—Ç–∞—è—Å—å 2 —Ä–∞–∑–∞ –Ω–∞ –∫–∞–∂–¥–æ–π.
    """
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –º–æ–¥–µ–ª–∏, —á—Ç–æ–±—ã —á–µ—Ä–µ–¥–æ–≤–∞—Ç—å
    models = AI_MODELS.copy()
    random.shuffle(models)

    for model_cfg in models:
        model = model_cfg["name"]
        provider = model_cfg["provider"]

        for attempt in range(2):
            try:
                print(f"üîπ Trying model {model} (provider: {provider}), attempt {attempt + 1}")

                if provider == "Google":
                    gen_config = types.GenerateContentConfig(
                        temperature=temperature,
                        top_p=top_p,
                        max_output_tokens=max_tokens,
                    )
                    response = genai_client.models.generate_content(
                        model=model,
                        contents=[query],  # –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞
                        config=gen_config,
                    )
                    incr_usage(model)
                    text = response.text
                    print(f"‚û°Ô∏è Google model output (first 500 chars): {text[:500]}")

                elif provider == "Groq":
                    msgs = [{"role": "user", "content": query}]
                    completion = client.chat.completions.create(
                        messages=msgs,
                        model=model,
                        max_tokens=max_tokens,
                        temperature=temperature,
                        top_p=top_p,
                    )
                    incr_usage(model)
                    text = completion.choices[0].message.content
                    print(f"‚û°Ô∏è Groq model output (first 500 chars): {text[:500]}")

                else:
                    logger.error(f"‚ùå Unknown provider: {provider}")
                    continue

                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON
                parsed = extract_json(text)
                print(f"üîπ Extracted JSON: {parsed} (type: {type(parsed)})")

                if parsed is None:
                    logger.warning(f"‚ö†Ô∏è Could not extract JSON on attempt {attempt + 1} with {model}")
                    continue

                if isinstance(parsed, dict):
                    return parsed
                if isinstance(parsed, str):
                    try:
                        return json.loads(parsed)
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Failed to parse JSON string from model {model}: {e}")
                        continue

                logger.warning(f"‚ö†Ô∏è Unexpected parsed type from model {model}: {type(parsed)}")

            except Exception as e:
                logger.error(f"‚ùå Error with model {model} (attempt {attempt + 1}): {e}")

    raise RuntimeError("All models failed to generate valid JSON")


def incr_usage(model_name: str):
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —É—á—ë—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ (—á—Ç–æ–±—ã —Ç—ã –¥–æ–±–∞–≤–∏–ª —Å–≤–æ—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é).
    """
    logger.info(f"Usage increment for {model_name}")
