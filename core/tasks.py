import logging
import json

from celery import shared_task
from django.db import transaction
from django.utils import timezone

from core.models import Lesson, LessonBlock, GenerationStatus, SubjectChoices, ImproveStatus
from .services.ai import generate_text  # —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

logger = logging.getLogger(__name__)


@shared_task(bind=True, name="core.tasks.generate_lesson_task")
def generate_lesson_task(self, lesson_id: str):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —É—Ä–æ–∫–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–ª–æ–∫–æ–≤.
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ (—Å–ø–∏—Å–æ–∫ hints) –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ completed,
    completed —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞.
    –ï—Å–ª–∏ –±–ª–æ–∫ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª—Å—è ‚Äî —É–º–µ–Ω—å—à–∞–µ–º total –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º.
    """
    try:
        lesson = Lesson.objects.get(id=lesson_id)
    except Lesson.DoesNotExist:
        logger.error(f"‚ùå Lesson {lesson_id} not found")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Å—Ç–∞—Ç—É—Å
    status, _ = GenerationStatus.objects.get_or_create(
        lesson=lesson,
        defaults={"status": GenerationStatus.Status.IN_PROGRESS, "total": 0, "completed": 0},
    )
    status.status = GenerationStatus.Status.IN_PROGRESS
    status.completed = 0
    status.save(update_fields=["status", "completed", "updated_at"])

    try:
        # === 1) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É (hints) ===
        structure_query = (
            f"–°–æ—Å—Ç–∞–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–∞–±–æ—á–µ–≥–æ –ª–∏—Å—Ç–∞ –ø–æ —Ç–µ–º–µ: {lesson.title}. "
            f"–ü—Ä–µ–¥–º–µ—Ç: {lesson.get_subject_display()}, —É—Ä–æ–≤–µ–Ω—å: {lesson.get_level_display()}. "
            f"–í–µ—Ä–Ω–∏ JSON —Å –∫–ª—é—á–æ–º 'blocks', –≥–¥–µ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ 'block_topic' ‚Äî "
            f"—Ç–µ–º—É, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±–ª–æ–∫–µ."
        )

        logger.info(f"üîÑ Generating structure for interactive lesson {lesson_id}")
        structure_json = generate_text(query=structure_query)
        logger.info(f"üîç structure_json type={type(structure_json)} repr={str(structure_json)[:800]}")

        # structure_json –º–æ–∂–µ—Ç –±—ã—Ç—å dict (–ª—É—á—à–µ) –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π —Å JSON
        if isinstance(structure_json, dict):
            structure = structure_json
        else:
            try:
                structure = json.loads(structure_json)
            except Exception as e:
                logger.exception(f"‚ùå Failed to parse structure JSON for lesson {lesson_id}: {e}")
                status.status = GenerationStatus.Status.FAILED
                status.save(update_fields=["status", "updated_at"])
                return

        blocks_hints = structure.get("blocks", [])
        if not isinstance(blocks_hints, list):
            logger.error(f"‚ùå 'blocks' is not a list for lesson {lesson_id}: {blocks_hints}")
            status.status = GenerationStatus.Status.FAILED
            status.save(update_fields=["status", "updated_at"])
            return

        total_blocks = len(blocks_hints)
        status.total = total_blocks
        status.save(update_fields=["total", "updated_at"])
        logger.info(f"‚ú® Structure generated for lesson {lesson_id}: total_blocks={total_blocks}")

        # === 2) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ ===
        for i, block_topic in enumerate(blocks_hints, start=1):
            # –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º hint
            hint = None
            if isinstance(block_topic, dict):
                hint = block_topic.get("block_topic") or block_topic.get("prompt") or str(block_topic)
            else:
                hint = str(block_topic)

            block_query = (
                f"–¢—ã - –º–µ—Ç–æ–¥–∏—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π Markdown. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ü–µ–ª—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Ä–∞–∑–¥–µ–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –ª–∏—Å—Ç–∞ –∏ –Ω–µ–±–æ–ª—å—à–æ–µ –∑–∞–¥–∞–Ω–∏–µ –±–µ–∑ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —É—Ä–æ–∫–∞ '{lesson.title}'. "
                f"–ü—Ä–µ–¥–º–µ—Ç: '{lesson.get_subject_display()}'. "
                f"–¢–µ–º–∞ —Ä–∞–∑–¥–µ–ª–∞: {hint}. "
                f"–í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏: title (str), content (str), has_task (true/false). "
                f"–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ JSON-–æ–±—ä–µ–∫—Ç–æ–º."
            )
            if lesson.subject == SubjectChoices.FOREIGN_LANG:
                block_query += (
                    " –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –∑–∞–¥–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω—ã "
                    "–Ω–∞ –∏–∑—É—á–∞–µ–º–æ–º –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ (–ù–ï –Ω–∞ —Ä—É—Å—Å–∫–æ–º). –ê –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω–µ —Å–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–≥–æ) - –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
                )

            logger.info(f"‚Üí Generating block {i}/{total_blocks} for lesson {lesson_id} (hint={hint[:200]})")

            try:
                # generate_text –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict (–µ—Å–ª–∏ —É–¥–∞—á–Ω–æ) –∏–ª–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                block_data = generate_text(query=block_query)

                # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –≤–µ—Ä–Ω—É–ª–∞—Å—å —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø—Ä–æ–±—É–µ–º json.loads
                if isinstance(block_data, str):
                    try:
                        block_data = json.loads(block_data)
                    except Exception as e:
                        raise ValueError(f"block_data is str but not json: {e}")

                # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                if not isinstance(block_data, dict):
                    raise ValueError(f"block_data is not dict: {type(block_data)}")

                title = block_data.get("title") or f"–ë–ª–æ–∫ {i}"
                content = block_data.get("content") or ""
                has_task = bool(block_data.get("has_task", False))

            except Exception as e:
                # –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –±–ª–æ–∫ ‚Äî —É–º–µ–Ω—å—à–∞–µ–º total –∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ
                logger.warning(f"‚ö†Ô∏è Failed to generate block {i} for lesson {lesson_id}: {e}")
                # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º total (–Ω–æ –Ω–µ –Ω–∏–∂–µ –Ω—É–ª—è)
                if status.total > 0:
                    status.total = max(0, status.total - 1)
                    status.save(update_fields=["total", "updated_at"])
                continue

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª–æ–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—á—Ç–æ–±—ã —É—Å–ø–µ—Ö –æ–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞ –Ω–µ –∑–∞–≤–∏—Å–µ–ª –æ—Ç –¥—Ä—É–≥–∏—Ö)
            try:
                with transaction.atomic():
                    LessonBlock.objects.create(
                        lesson=lesson,
                        order=i,
                        title=title,
                        content=content,
                        has_task=has_task,
                    )
                # –æ–±–Ω–æ–≤–ª—è–µ–º completed —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –±–ª–æ–∫–∞
                status.completed = status.completed + 1
                status.save(update_fields=["completed", "updated_at"])

                logger.info(f"‚úÖ Block {i} saved for lesson {lesson_id} (has_task={has_task})")
            except Exception as e:
                logger.exception(f"‚ùå DB error saving block {i} for lesson {lesson_id}: {e}")
                # —É–º–µ–Ω—å—à–∞–µ–º total (—Ç.–∫. –±–ª–æ–∫ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω)
                if status.total > 0:
                    status.total = max(0, status.total - 1)
                    status.save(update_fields=["total", "updated_at"])
                continue

        try:
            blocks = list(LessonBlock.objects.filter(lesson=lesson).order_by('order', 'id'))
            for idx, block in enumerate(blocks, start=1):
                if block.order != idx:
                    block.order = idx
                    block.save(update_fields=['order'])
            logger.info(f"üîß Orders fixed for lesson {lesson_id}")
        except Exception as e:
            logger.exception(f"‚ùå Failed to fix orders for lesson {lesson_id}: {e}")

        # –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
        status.status = GenerationStatus.Status.DONE if status.completed == status.total else GenerationStatus.Status.FAILED if status.completed == 0 else GenerationStatus.Status.IN_PROGRESS
        status.save(update_fields=["status", "updated_at"])
        logger.info(f"üéâ Generation finished for lesson {lesson_id}: {status.completed}/{status.total} (status={status.status})")

    except Exception as e:
        logger.exception(f"‚ùå Unexpected error during generation for lesson {lesson_id}: {e}")
        status.status = GenerationStatus.Status.FAILED
        status.save(update_fields=["status", "updated_at"])

MODE_DESCRIPTIONS = {
    "complexify": "—É—Å–ª–æ–∂–Ω–∏ –º–∞—Ç–µ—Ä–∏–∞–ª, –¥–æ–±–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã",
    "simplify": "—É–ø—Ä–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª, —Å–¥–µ–ª–∞–π –µ–≥–æ –ø—Ä–æ—â–µ –∏ –ø–æ–Ω—è—Ç–Ω–µ–µ",
    "more_tasks": "–¥–æ–±–∞–≤—å –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–∏–π –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ —Ç–µ–º–µ",
    "remove_tasks": "—É–±–µ—Ä–∏ —á–∞—Å—Ç—å –∑–∞–¥–∞–Ω–∏–π –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, –æ—Å—Ç–∞–≤–∏–≤ —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ"
}

@shared_task(bind=True, name="core.tasks.improve_block_task")
def improve_block_task(self, block_id: int, mode: str, improve_id: int):
    try:
        block = LessonBlock.objects.get(id=block_id)
        status = ImproveStatus.objects.get(id=improve_id)
        human_mode = MODE_DESCRIPTIONS.get(mode, mode)
    except (LessonBlock.DoesNotExist, ImproveStatus.DoesNotExist):
        return

    status.status = ImproveStatus.Status.IN_PROGRESS
    status.task_id = self.request.id
    status.save(update_fields=["status", "task_id", "updated_at"])

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º query –¥–ª—è –ò–ò
        query = (
            f"–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å —É–ª—É—á—à–∏—Ç—å —É—Ä–æ–∫.\n"
            f"–¢–µ–º–∞ —Ä–∞–∑–¥–µ–ª–∞: {block.title}\n"
            f"–¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —Ä–∞–∑–¥–µ–ª–∞:\n{block.content}\n\n"
            f"–ó–∞–¥–∞—á–∞ ‚Äî {human_mode}.\n"
            "–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON —Å –ø–æ–ª–µ–º {\"improved_content\": str}"
        )

        ai_response = generate_text(query=query)

        if isinstance(ai_response, str):
            try:
                ai_response = json.loads(ai_response)
            except Exception as e:
                raise ValueError(f"AI –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: {e}")

        new_content = ai_response.get("improved_content")
        if not new_content:
            raise ValueError("AI –Ω–µ –≤–µ—Ä–Ω—É–ª –ø–æ–ª–µ 'improved_content'")

        block.content = new_content
        block.save(update_fields=["content", "updated_at"])

        status.status = ImproveStatus.Status.DONE
        status.result_content = new_content
        status.save(update_fields=["status", "result_content", "updated_at"])

    except Exception as e:
        logger.exception(f"‚ùå Failed to improve block {block_id}: {e}")
        status.status = ImproveStatus.Status.FAILED
        status.save(update_fields=["status", "updated_at"])




YOOKASSA_API_URL = "https://api.yookassa.ru/v3/payments"
YOOKASSA_SHOP_ID = "XXX"
YOOKASSA_SECRET_KEY = "YYY"

# –≠—Ç–∞ –∑–∞–¥–∞—á–∞ –Ω–∏–∫—É–¥–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –≤—Å–µ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
@shared_task
def renew_tariffs():
    now = timezone.now()
