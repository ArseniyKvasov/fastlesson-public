from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from asgiref.sync import sync_to_async
from django.core.exceptions import PermissionDenied

from fastlesson_bot.handlers.teacher import main_menu
from fastlesson_bot.services.rate_limit import check_rate_limit
from fastlesson_bot.services.user_service import get_or_create_user, get_user_by_tg, track_user_activity
from core.models import UserRole


router = Router()


def role_keyboard():
    kb = InlineKeyboardBuilder()
    #kb.button(text="üéì –£—á–µ–Ω–∏–∫", callback_data="set_role:student")
    kb.button(text="üë®üè´ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä", callback_data="set_role:tutor")
    kb.button(text="üè´ –®–∫–æ–ª—å–Ω—ã–π —É—á–∏—Ç–µ–ª—å", callback_data="set_role:school_teacher")
    kb.adjust(1)
    return kb

@router.message(F.text == "–ù–∞ –≥–ª–∞–≤–Ω—É—é")
async def main_menu_via_reply_button(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ reply-–∫–Ω–æ–ø–∫–∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é" ‚Äî –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π main_menu.
    """
    try:
        await main_menu(message, state)
    except Exception:
        # –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏ ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–æ—Å—Ç—ã–º –æ—Ç–≤–µ—Ç–æ–º
        try:
            await main_menu(message, state)
        except Exception:
            pass

@router.message(Command("start"))
async def start_handler(message: types.Message):
    user = await get_user_by_tg(message.from_user.id)

    # reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    reply_kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞ –≥–ª–∞–≤–Ω—É—é")]],
        resize_keyboard=True,
        one_time_keyboard=False
    )

    # –¢–µ–∫—Å—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    greeting_text = (
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!\n\n"
        "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –ª–∏—Å—Ç—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –§–ì–û–°, –∑–∞ 2 –∫–ª–∏–∫–∞ ‚Äî "
        "–∑–∞–±—É–¥—å—Ç–µ –æ –¥–æ–ª–≥–∏—Ö —á–∞—Å–∞—Ö –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏!"
    )

    if user:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ –≤–º–µ—Å—Ç–µ —Å reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
        try:
            await message.answer(greeting_text, reply_markup=reply_kb)
        except Exception:
            pass

        try:
            await sync_to_async(check_rate_limit)(
                message.from_user.id,
                "start_command",
                limit=1,
                window=20
            )
        except PermissionDenied as e:
            try:
                await message.answer(f"‚ö†Ô∏è {str(e)}")
            except Exception:
                pass
            return

        kb = InlineKeyboardBuilder()
        kb.button(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="change_role")
        kb.button(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="choose_subject")

        # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∫–æ—Ä–æ—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
        text = (
            f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ *{user.get_role_display()}*.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
        )

        try:
            await message.answer(text, reply_markup=kb.as_markup(), parse_mode="Markdown")
        except Exception:
            try:
                await message.answer(text, parse_mode="Markdown")
            except Exception:
                pass

    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Å–Ω–∞—á–∞–ª–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        try:
            await message.answer(greeting_text, reply_markup=reply_kb)
        except Exception:
            pass

        # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å (—Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π role_keyboard)
        choose_text = (
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º:"
        )

        try:
            await message.answer(
                text=choose_text,
                reply_markup=role_keyboard().as_markup()
            )
        except Exception:
            try:
                await message.answer(choose_text)
            except Exception:
                pass


@router.callback_query(F.data == "change_role")
async def change_role_handler(callback: types.CallbackQuery):
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:",
        reply_markup=role_keyboard().as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("set_role:"))
async def set_role_handler(callback: types.CallbackQuery):
    try:
        role_value = callback.data.split(":")[1]
        role = UserRole(role_value)
        user = await get_or_create_user(callback.from_user.id, role, telegram_username=callback.from_user.username)

        # ‚úÖ sync_to_async –¥–ª—è track_user_activity
        metrics = await sync_to_async(track_user_activity)(user)

        kb = InlineKeyboardBuilder()
        kb.button(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="change_role")

        text = f"‚úÖ –†–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ *{user.get_role_display()}*."
        if role == UserRole.STUDENT:
            text += (
                "\n–°—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å –ª—É—á—à–µ, –æ—Å—Ç–∞–≤–∞—è—Å—å –≤ Telegram.\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤–∞—à–µ–º—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.\n\n"
                "–ï—Å–ª–∏ –≤—ã —É–∂–µ –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å —Å —É—á–∏—Ç–µ–ª–µ–º, –Ω–æ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å ‚Äî "
                "–ø–æ–ø—Ä–æ—Å–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –µ—â–µ —Ä–∞–∑."
            )
        else:
            kb.button(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="choose_subject")

        await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=kb.as_markup())
        await callback.answer()

    except (ValueError, IndexError) as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
